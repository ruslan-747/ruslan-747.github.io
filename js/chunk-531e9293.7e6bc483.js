(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-531e9293"],{"20a0":function(t,e,a){},"2dc1":function(t,e,a){"use strict";a("301e")},"301e":function(t,e,a){},4092:function(t,e,a){"use strict";a("4d6e")},4351:function(t,e,a){},"4d6e":function(t,e,a){},5322:function(t,e,a){t.exports=a.p+"img/cpu2.43768eed.png"},6506:function(t,e,a){"use strict";var i=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"page-slider"},[a("b-carousel",{attrs:{id:"carousel-1",interval:3e3,controls:"","label-next":"","label-prev":""}},[t._t("default")],2)],1)},s=[],n={name:"PageSlider"},c=n,r=(a("cd10"),a("2877")),u=Object(r["a"])(c,i,s,!1,null,null,null);e["a"]=u.exports},7382:function(t,e,a){"use strict";a("90f2")},"78f4":function(t,e,a){"use strict";a("d0ba")},8492:function(t,e,a){"use strict";var i=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("h2",{staticClass:"page-heading"},[t._t("default")],2)},s=[],n={name:"PageHeading"},c=n,r=(a("a9a8"),a("2877")),u=Object(r["a"])(c,i,s,!1,null,"1c7801b6",null);e["a"]=u.exports},"8cce":function(t,e,a){"use strict";a("20a0")},"8e0a":function(t,e,a){"use strict";var i=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("p",{staticClass:"page-text"},[t._t("default")],2)},s=[],n={name:"PageText"},c=n,r=(a("8cce"),a("2877")),u=Object(r["a"])(c,i,s,!1,null,"51329ced",null);e["a"]=u.exports},"90f2":function(t,e,a){},9238:function(t,e,a){t.exports=a.p+"img/cpu3.ea928ad1.png"},"92bd":function(t,e,a){"use strict";var i=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("h4",{staticClass:"page-section"},[t._t("default")],2)},s=[],n={name:"PageSection"},c=n,r=(a("7382"),a("2877")),u=Object(r["a"])(c,i,s,!1,null,"26671835",null);e["a"]=u.exports},"94e9":function(t,e,a){t.exports=a.p+"img/cpu1.62433f7e.png"},"973e":function(t,e,a){"use strict";var i=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ul",{staticClass:"page-list"},[t._t("default")],2)},s=[],n={name:"PageList"},c=n,r=(a("78f4"),a("2877")),u=Object(r["a"])(c,i,s,!1,null,"000a779d",null);e["a"]=u.exports},"9b82":function(t,e,a){},a9a8:function(t,e,a){"use strict";a("9b82")},ac76:function(t,e,a){"use strict";var i=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("h3",{staticClass:"page-subheading"},[t._t("default")],2)},s=[],n={name:"PageSubheading"},c=n,r=(a("4092"),a("2877")),u=Object(r["a"])(c,i,s,!1,null,"6145377a",null);e["a"]=u.exports},cd10:function(t,e,a){"use strict";a("4351")},d0ba:function(t,e,a){},f4a2:function(t,e,a){"use strict";var i=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("li",{staticClass:"page-list-item"},[a("page-text",{staticClass:"page-list-item__text"},[t._t("default")],2)],1)},s=[],n=a("8e0a"),c={name:"PageListItem",components:{PageText:n["a"]}},r=c,u=(a("2dc1"),a("2877")),l=Object(u["a"])(r,i,s,!1,null,"d20dc2a0",null);e["a"]=l.exports},f85b:function(t,e,a){"use strict";a.r(e);var i=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"cpu"},[i("page-heading",[t._v("Процессор")]),i("page-subheading",{attrs:{id:"определение"}},[t._v("Определение")]),i("page-text",[t._v("Центра́льный проце́ссор (ЦП; также центра́льное проце́ссорное устро́йство — ЦПУ; англ. central processing unit, CPU, дословно — центральное обрабатывающее устройство, часто просто процессор) — электронный блок либо интегральная схема, исполняющая машинные инструкции (код программ), главная часть аппаратного обеспечения компьютера или программируемого логического контроллера. Иногда называют микропроцессором или просто процессором.")]),i("page-text",[t._v("Изначально термин центральное процессорное устройство описывал специализированный класс логических машин, предназначенных для выполнения сложных компьютерных программ. Вследствие довольно точного соответствия этого назначения функциям существовавших в то время компьютерных процессоров он естественным образом был перенесён на сами компьютеры. Начало применения термина и его аббревиатуры по отношению к компьютерным системам было положено в 1960-е годы. Устройство, архитектура и реализация процессоров с тех пор неоднократно менялись, однако их основные исполняемые функции остались теми же, что и прежде.")]),i("page-text",[t._v("Главными характеристиками ЦПУ являются: тактовая частота, производительность, энергопотребление, нормы литографического процесса, используемого при производстве (для микропроцессоров), и архитектура.")]),i("page-text",[t._v("Ранние ЦП создавались в виде уникальных составных частей для уникальных и даже единственных в своём роде компьютерных систем. Позднее от дорогостоящего способа разработки процессоров, предназначенных для выполнения одной единственной или нескольких узкоспециализированных программ, производители компьютеров перешли к серийному изготовлению типовых классов многоцелевых процессорных устройств. Тенденция к стандартизации компьютерных комплектующих зародилась в эпоху бурного развития полупроводниковых элементов, мейнфреймов и мини-компьютеров, а с появлением интегральных схем она стала ещё более популярной. Создание микросхем позволило ещё больше увеличить сложность ЦП с одновременным уменьшением их физических размеров. Стандартизация и миниатюризация процессоров привели к глубокому проникновению основанных на них цифровых устройств в повседневную жизнь человека. Современные процессоры можно найти не только в таких высокотехнологичных устройствах, как компьютеры, но и в автомобилях, калькуляторах, мобильных телефонах и даже в детских игрушках. Чаще всего они представлены микроконтроллерами, где, помимо вычислительного устройства, на кристалле расположены дополнительные компоненты (память программ и данных, интерфейсы, порты ввода-вывода, таймеры и др.). Современные вычислительные возможности микроконтроллера сравнимы с процессорами персональных ЭВМ десятилетней давности, а чаще даже значительно превосходят их показатели.")]),i("page-subheading",{attrs:{id:"архитектура_фон_неймана"}},[t._v("Архитектура фон Неймана")]),i("page-text",[t._v("Большинство современных процессоров для персональных компьютеров в общем основано на той или иной версии циклического процесса последовательной обработки данных, изобретённого Джоном фон Нейманом.")]),i("page-text",[t._v("Дж. фон Нейман придумал схему постройки компьютера в 1946 году.")]),i("page-text",[t._v("Отличительной особенностью архитектуры фон Неймана является то, что инструкции и данные хранятся в одной и той же памяти.")]),i("page-text",[t._v("В различных архитектурах и для различных команд могут потребоваться дополнительные этапы. Например, для арифметических команд могут потребоваться дополнительные обращения к памяти, во время которых производится считывание операндов и запись результатов.")]),i("page-text",[t._v("Этапы цикла выполнения:")]),i("page-list",[i("page-list-item",[t._v("Процессор выставляет число, хранящееся в регистре счётчика команд, на шину адреса и отдаёт памяти команду чтения.")]),i("page-list-item",[t._v("Выставленное число является для памяти адресом; память, получив адрес и команду чтения, выставляет содержимое, хранящееся по этому адресу, на шину данных и сообщает о готовности.")]),i("page-list-item",[t._v("Процессор получает число с шины данных, интерпретирует его как команду (машинную инструкцию) из своей системы команд и исполняет её.")]),i("page-list-item",[t._v("Если последняя команда не является командой перехода, процессор увеличивает на единицу (в предположении, что длина каждой команды равна единице) число, хранящееся в счётчике команд; в результате там образуется адрес следующей команды.")])],1),i("page-section",{attrs:{id:"конвейерная_архитектура"}},[t._v("Конвейерная архитектура")]),i("page-text",[t._v("Конвейерная архитектура (англ. pipelining) была введена в центральный процессор с целью повышения быстродействия. Обычно для выполнения каждой команды требуется осуществить некоторое количество однотипных операций, например: выборка команды из ОЗУ, дешифровка команды, адресация операнда в ОЗУ, выборка операнда из ОЗУ, выполнение команды, запись результата в ОЗУ. Каждую из этих операций сопоставляют одной ступени конвейера. Например, конвейер микропроцессора с архитектурой MIPS-I содержит четыре стадии:")]),i("page-list",[i("page-list-item",[t._v("получение и декодирование инструкции,")]),i("page-list-item",[t._v("адресация и выборка операнда из ОЗУ,")]),i("page-list-item",[t._v("выполнение арифметических операций,")]),i("page-list-item",[t._v("сохранение результата операции.")])],1),i("page-text",[t._v("Факторы, снижающие эффективность конвейера:")]),i("page-list",[i("page-list-item",[t._v("Простой конвейера, когда некоторые ступени не используются (например, адресация и выборка операнда из ОЗУ не нужны, если команда работает с регистрами).")]),i("page-list-item",[t._v("Ожидание: если следующая команда использует результат предыдущей, то последняя не может начать выполняться до выполнения первой (это преодолевается при использовании внеочередного выполнения команд — out-of-order execution).")]),i("page-list-item",[t._v("Очистка конвейера при попадании в него команды перехода (эту проблему удаётся сгладить, используя предсказание переходов).")])],1),i("page-section",{attrs:{id:"суперскалярная_архитектура"}},[t._v("Суперскалярная архитектура")]),i("page-text",[t._v("Способность выполнения нескольких машинных инструкций за один такт процессора путём увеличения числа исполнительных устройств. Появление этой технологии привело к существенному увеличению производительности, в то же время существует определённый предел роста числа исполнительных устройств, при превышении которого производительность практически перестает расти, а исполнительные устройства простаивают. Частичным решением этой проблемы является, например, технология Hyper-threading.")]),i("page-section",{attrs:{id:"cisc_процессоры"}},[t._v("CISC-процессоры")]),i("page-text",[t._v("Complex instruction set computer — вычисления со сложным набором команд. Процессорная архитектура, основанная на усложнённом наборе команд. Типичными представителями CISC являются микропроцессоры семейства x86 (хотя уже много лет эти процессоры являются CISC только по внешней системе команд: в начале процесса исполнения сложные команды разбиваются на более простые микрооперации (МОП), исполняемые RISC-ядром).")]),i("page-section",{attrs:{id:"risc_процессоры"}},[t._v("RISC-процессоры")]),i("page-text",[t._v("Reduced instruction set computer — вычисления с упрощённым набором команд (в литературе слово reduced нередко ошибочно переводят как «сокращённый»). Архитектура процессоров, построенная на основе упрощённого набора команд, характеризуется наличием команд фиксированной длины, большого количества регистров, операций типа регистр-регистр, а также отсутствием косвенной адресации. Концепция RISC разработана Джоном Коком из IBM Research, название придумано Дэвидом Паттерсоном (David Patterson).")]),i("page-text",[t._v("Упрощение набора команд призвано сократить конвейер, что позволяет избежать задержек на операциях условных и безусловных переходов. Однородный набор регистров упрощает работу компилятора при оптимизации исполняемого программного кода. Кроме того, RISC-процессоры отличаются меньшим энергопотреблением и тепловыделением.")]),i("page-text",[t._v("Среди первых реализаций этой архитектуры были процессоры MIPS, PowerPC, SPARC, Alpha, PA-RISC. В мобильных устройствах широко используются ARM-процессоры.")]),i("page-section",{attrs:{id:"misc_процессоры"}},[t._v("MISC-процессоры")]),i("page-text",[t._v("Minimum instruction set computer — вычисления с минимальным набором команд. Дальнейшее развитие идей команды Чака Мура, который полагает, что принцип простоты, изначальный для RISC-процессоров, слишком быстро отошёл на задний план. В пылу борьбы за максимальное быстродействие, RISC догнал и обогнал многие CISC-процессоры по сложности. Архитектура MISC строится на стековой вычислительной модели с ограниченным числом команд (примерно 20—30 команд).")]),i("page-section",{attrs:{id:"vliw_процессоры"}},[t._v("VLIW-процессоры")]),i("page-text",[t._v("Very long instruction word — сверхдлинное командное слово. Архитектура процессоров с явно выраженным параллелизмом вычислений, заложенным в систему команд процессора. Являются основой для архитектуры EPIC. Ключевым отличием от суперскалярных CISC-процессоров является то, что для них загрузкой исполнительных устройств занимается часть процессора (планировщик), на что отводится достаточно малое время, в то время как загрузкой вычислительных устройств для VLIW-процессора занимается компилятор, на что отводится существенно больше времени (качество загрузки и, соответственно, производительность теоретически должны быть выше).")]),i("page-subheading",{attrs:{id:"как_выглядит_процессор"}},[t._v("Как выглядит процессор")]),i("page-slider",[i("b-carousel-slide",{attrs:{"img-src":a("94e9")}}),i("b-carousel-slide",{attrs:{"img-src":a("5322")}}),i("b-carousel-slide",{attrs:{"img-src":a("9238")}})],1)],1)},s=[],n=a("6506"),c=a("f4a2"),r=a("973e"),u=a("92bd"),l=a("8e0a"),p=a("ac76"),g=a("8492"),o={name:"Cpu",components:{PageText:l["a"],PageSubheading:p["a"],PageHeading:g["a"],PageSection:u["a"],PageList:r["a"],PageListItem:c["a"],PageSlider:n["a"]}},_=o,d=a("2877"),v=Object(d["a"])(_,i,s,!1,null,"405089d1",null);e["default"]=v.exports}}]);
//# sourceMappingURL=chunk-531e9293.7e6bc483.js.map