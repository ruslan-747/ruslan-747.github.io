(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-55d221b6"],{"000d":function(e,t,a){"use strict";var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ul",{staticClass:"page-list",class:{"page-list--disc":e.disc}},e._l(e.listItems,(function(t,n){return a("li",{key:n},["object"===typeof t?a("div",[e._v(" "+e._s(t.text)+" "),a("page-list",{attrs:{disc:"","list-items":t.children}})],1):a("div",[e._v(" "+e._s(t)+" ")])])})),0)},r=[],i={name:"PageList",props:{listItems:{type:Array,required:!0},disc:{required:!1,type:Boolean}}},s=i,c=(a("e76b"),a("2877")),u=Object(c["a"])(s,n,r,!1,null,"4d0dd669",null);t["a"]=u.exports},"07e4":function(e,t,a){e.exports=a.p+"img/ram3.033d9261.png"},"0cb2":function(e,t,a){var n=a("7b0b"),r=Math.floor,i="".replace,s=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,c=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,a,u,o,p){var l=a+e.length,g=u.length,f=c;return void 0!==o&&(o=n(o),f=s),i.call(p,f,(function(n,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,a);case"'":return t.slice(l);case"<":s=o[i.slice(1,-1)];break;default:var c=+i;if(0===c)return n;if(c>g){var p=r(c/10);return 0===p?n:p<=g?void 0===u[p-1]?i.charAt(1):u[p-1]+i.charAt(1):n}s=u[c-1]}return void 0===s?"":s}))}},"0deb":function(e,t,a){"use strict";a("f647")},"0f06":function(e,t,a){"use strict";a("9202")},"18dc":function(e,t,a){"use strict";var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("h1",{staticClass:"page-heading"},[e._t("default")],2)},r=[],i={name:"PageHeading"},s=i,c=(a("7804"),a("2877")),u=Object(c["a"])(s,n,r,!1,null,"bee9b014",null);t["a"]=u.exports},"44e7":function(e,t,a){var n=a("861d"),r=a("c6b6"),i=a("b622"),s=i("match");e.exports=function(e){var t;return n(e)&&(void 0!==(t=e[s])?!!t:"RegExp"==r(e))}},"483a":function(e,t,a){e.exports=a.p+"img/bus3.f0543b32.jpg"},"498a2":function(e,t,a){"use strict";var n=a("23e7"),r=a("58a8").trim,i=a("c8d2");n({target:"String",proto:!0,forced:i("trim")},{trim:function(){return r(this)}})},5322:function(e,t,a){e.exports=a.p+"img/cpu2.43768eed.png"},"570f":function(e,t,a){"use strict";a("89ab")},"57a4":function(e,t,a){},5899:function(e,t){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},"58a8":function(e,t,a){var n=a("1d80"),r=a("577e"),i=a("5899"),s="["+i+"]",c=RegExp("^"+s+s+"*"),u=RegExp(s+s+"*$"),o=function(e){return function(t){var a=r(n(t));return 1&e&&(a=a.replace(c,"")),2&e&&(a=a.replace(u,"")),a}};e.exports={start:o(1),end:o(2),trim:o(3)}},"5b81":function(e,t,a){"use strict";var n=a("23e7"),r=a("1d80"),i=a("1626"),s=a("44e7"),c=a("577e"),u=a("dc4a"),o=a("ad6d"),p=a("0cb2"),l=a("b622"),g=a("c430"),f=l("replace"),d=RegExp.prototype,v=Math.max,b=function(e,t,a){return a>e.length?-1:""===t?a:e.indexOf(t,a)};n({target:"String",proto:!0},{replaceAll:function(e,t){var a,n,l,m,_,h,x,C,I,S=r(this),P=0,y=0,A="";if(null!=e){if(a=s(e),a&&(n=c(r("flags"in d?e.flags:o.call(e))),!~n.indexOf("g")))throw TypeError("`.replaceAll` does not allow non-global regexes");if(l=u(e,f),l)return l.call(e,S,t);if(g&&a)return c(S).replace(e,t)}m=c(S),_=c(e),h=i(t),h||(t=c(t)),x=_.length,C=v(1,x),P=b(m,_,0);while(-1!==P)I=h?c(t(_,P,m)):p(_,m,P,[],void 0,t),A+=m.slice(y,P)+I,y=P+x,P=b(m,_,P+C);return y<m.length&&(A+=m.slice(y)),A}})},"679c":function(e,t,a){"use strict";var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("p",{staticClass:"page-text"},[e._t("default")],2)},r=[],i={name:"PageText"},s=i,c=(a("b85f"),a("2877")),u=Object(c["a"])(s,n,r,!1,null,"0b957970",null);t["a"]=u.exports},7804:function(e,t,a){"use strict";a("e38c")},"7a83":function(e,t,a){"use strict";a("a334")},"89ab":function(e,t,a){},"8eb9":function(e,t,a){e.exports=a.p+"img/ram1.64bbddea.png"},9202:function(e,t,a){},9238:function(e,t,a){e.exports=a.p+"img/cpu3.ea928ad1.png"},9332:function(e,t,a){e.exports=a.p+"img/bus1.f1b33bff.jpg"},"94e9":function(e,t,a){e.exports=a.p+"img/cpu1.62433f7e.png"},"973f":function(e,t,a){"use strict";var n=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("b-carousel",{staticClass:"page-carousel",attrs:{indicators:"",controls:"","label-next":"","label-prev":""}},e._l(e.images,(function(e,t){return n("b-carousel-slide",{key:t,attrs:{"img-src":a("bb6e")("./"+e)}})})),1)},r=[],i={name:"PageCarousel",props:{images:{required:!0,type:Array}}},s=i,c=(a("570f"),a("0deb"),a("2877")),u=Object(c["a"])(s,n,r,!1,null,"57bace50",null);t["a"]=u.exports},a334:function(e,t,a){},a5f0:function(e,t,a){"use strict";a("57a4")},ad6d:function(e,t,a){"use strict";var n=a("825a");e.exports=function(){var e=n(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},b0c0:function(e,t,a){var n=a("83ab"),r=a("5e77").EXISTS,i=a("9bf2").f,s=Function.prototype,c=s.toString,u=/^\s*function ([^ (]*)/,o="name";n&&!r&&i(s,o,{configurable:!0,get:function(){try{return c.call(this).match(u)[1]}catch(e){return""}}})},b85f:function(e,t,a){"use strict";a("ea24")},b9e7:function(e,t,a){"use strict";var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("h3",{staticClass:"page-subheading"},[e._t("default")],2)},r=[],i={name:"PageSubheading"},s=i,c=(a("0f06"),a("2877")),u=Object(c["a"])(s,n,r,!1,null,"7193c4dd",null);t["a"]=u.exports},bb6e:function(e,t,a){var n={"./bus1.jpg":"9332","./bus2.jpg":"e154","./bus3.jpg":"483a","./cpu1.png":"94e9","./cpu2.png":"5322","./cpu3.png":"9238","./ram1.png":"8eb9","./ram2.png":"cffa","./ram3.png":"07e4"};function r(e){var t=i(e);return a(t)}function i(e){if(!a.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}r.keys=function(){return Object.keys(n)},r.resolve=i,e.exports=r,r.id="bb6e"},c8d2:function(e,t,a){var n=a("5e77").PROPER,r=a("d039"),i=a("5899"),s="​᠎";e.exports=function(e){return r((function(){return!!i[e]()||s[e]()!==s||n&&i[e].name!==e}))}},cffa:function(e,t,a){e.exports=a.p+"img/ram2.7128e6a0.png"},d808:function(e,t,a){},e154:function(e,t,a){e.exports=a.p+"img/bus2.af519bb6.jpg"},e38c:function(e,t,a){},e76b:function(e,t,a){"use strict";a("d808")},ea24:function(e,t,a){},f647:function(e,t,a){},f85b:function(e,t,a){"use strict";a.r(t);var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"cpu"},[a("page-heading",[e._v("Процессор")]),a("page-text",[e._v("Центра́льный проце́ссор (ЦП; также центра́льное проце́ссорное устро́йство — ЦПУ; англ. central processing unit, CPU, дословно — центральное обрабатывающее устройство, часто просто процессор) — электронный блок либо интегральная схема, исполняющая машинные инструкции (код программ), главная часть аппаратного обеспечения компьютера или программируемого логического контроллера. Иногда называют микропроцессором или просто процессором.")]),a("page-text",[e._v("Изначально термин центральное процессорное устройство описывал специализированный класс логических машин, предназначенных для выполнения сложных компьютерных программ. Вследствие довольно точного соответствия этого назначения функциям существовавших в то время компьютерных процессоров он естественным образом был перенесён на сами компьютеры. Начало применения термина и его аббревиатуры по отношению к компьютерным системам было положено в 1960-е годы. Устройство, архитектура и реализация процессоров с тех пор неоднократно менялись, однако их основные исполняемые функции остались теми же, что и прежде.")]),a("page-text",[e._v("Главными характеристиками ЦПУ являются: тактовая частота, производительность, энергопотребление, нормы литографического процесса, используемого при производстве (для микропроцессоров), и архитектура.")]),a("page-text",[e._v("Ранние ЦП создавались в виде уникальных составных частей для уникальных и даже единственных в своём роде компьютерных систем. Позднее от дорогостоящего способа разработки процессоров, предназначенных для выполнения одной единственной или нескольких узкоспециализированных программ, производители компьютеров перешли к серийному изготовлению типовых классов многоцелевых процессорных устройств. Тенденция к стандартизации компьютерных комплектующих зародилась в эпоху бурного развития полупроводниковых элементов, мейнфреймов и мини-компьютеров, а с появлением интегральных схем она стала ещё более популярной. Создание микросхем позволило ещё больше увеличить сложность ЦП с одновременным уменьшением их физических размеров. Стандартизация и миниатюризация процессоров привели к глубокому проникновению основанных на них цифровых устройств в повседневную жизнь человека. Современные процессоры можно найти не только в таких высокотехнологичных устройствах, как компьютеры, но и в автомобилях, калькуляторах, мобильных телефонах и даже в детских игрушках. Чаще всего они представлены микроконтроллерами, где, помимо вычислительного устройства, на кристалле расположены дополнительные компоненты (память программ и данных, интерфейсы, порты ввода-вывода, таймеры и др.). Современные вычислительные возможности микроконтроллера сравнимы с процессорами персональных ЭВМ десятилетней давности, а чаще даже значительно превосходят их показатели.")]),a("page-section",{attrs:{heading:"Архитектура фон Неймана"}}),a("page-text",[e._v("Большинство современных процессоров для персональных компьютеров в общем основано на той или иной версии циклического процесса последовательной обработки данных, изобретённого Джоном фон Нейманом.")]),a("page-text",[e._v("Дж. фон Нейман придумал схему постройки компьютера в 1946 году.")]),a("page-text",[e._v("Отличительной особенностью архитектуры фон Неймана является то, что инструкции и данные хранятся в одной и той же памяти.")]),a("page-text",[e._v("В различных архитектурах и для различных команд могут потребоваться дополнительные этапы. Например, для арифметических команд могут потребоваться дополнительные обращения к памяти, во время которых производится считывание операндов и запись результатов.")]),a("page-text",[e._v("Этапы цикла выполнения:")]),a("page-list",{attrs:{"list-items":["Процессор выставляет число, хранящееся в регистре счётчика команд, на шину адреса и отдаёт памяти команду чтения.","Выставленное число является для памяти адресом; память, получив адрес и команду чтения, выставляет содержимое, хранящееся по этому адресу, на шину данных и сообщает о готовности.","Процессор получает число с шины данных, интерпретирует его как команду (машинную инструкцию) из своей системы команд и исполняет её.","Если последняя команда не является командой перехода, процессор увеличивает на единицу (в предположении, что длина каждой команды равна единице) число, хранящееся в счётчике команд; в результате там образуется адрес следующей команды."]}}),a("page-text",[e._v("Данный цикл выполняется неизменно, и именно он называется процессом (откуда и произошло название устройства).")]),a("page-text",[e._v("Во время процесса процессор считывает последовательность команд, содержащихся в памяти, и исполняет их. Такая последовательность команд называется программой и представляет алгоритм работы процессора. Очерёдность считывания команд изменяется в случае, если процессор считывает команду перехода, — тогда адрес следующей команды может оказаться другим. Другим примером изменения процесса может служить случай получения команды останова или переключение в режим обработки прерывания.")]),a("page-text",[e._v("Команды центрального процессора являются самым нижним уровнем управления компьютером, поэтому выполнение каждой команды неизбежно и безусловно. Не производится никакой проверки на допустимость выполняемых действий, в частности, не проверяется возможная потеря ценных данных. Чтобы компьютер выполнял только допустимые действия, команды должны быть соответствующим образом организованы в виде необходимой программы.")]),a("page-text",[e._v("Скорость перехода от одного этапа цикла к другому определяется тактовым генератором. Тактовый генератор вырабатывает импульсы, служащие ритмом для центрального процессора. Частота тактовых импульсов называется тактовой частотой.")]),a("page-subheading",[e._v("Конвейерная архитектура")]),a("page-text",[e._v("Конвейерная архитектура (англ. pipelining) была введена в центральный процессор с целью повышения быстродействия. Обычно для выполнения каждой команды требуется осуществить некоторое количество однотипных операций, например: выборка команды из ОЗУ, дешифровка команды, адресация операнда в ОЗУ, выборка операнда из ОЗУ, выполнение команды, запись результата в ОЗУ. Каждую из этих операций сопоставляют одной ступени конвейера. Например, конвейер микропроцессора с архитектурой MIPS-I содержит четыре стадии:")]),a("page-list",{attrs:{"list-items":["получение и декодирование инструкции,","адресация и выборка операнда из ОЗУ,","выполнение арифметических операций,","сохранение результата операции."]}}),a("page-text",[e._v("После освобождения k-й ступени конвейера она сразу приступает к работе над следующей командой. Если предположить, что каждая ступень конвейера тратит единицу времени на свою работу, то выполнение команды на конвейере длиной в n ступеней займёт n единиц времени, однако в самом оптимистичном случае результат выполнения каждой следующей команды будет получаться через каждую единицу времени.")]),a("page-text",[e._v("Действительно, при отсутствии конвейера выполнение команды займёт n единиц времени (так как для выполнения команды по-прежнему необходимо выполнять выборку, дешифровку и т. д.), и для исполнения m команд понадобится n + m единиц времени; при использовании конвейера (в самом оптимистичном случае) для выполнения m команд понадобится всего лишь n+m единиц времени.")]),a("page-text",[e._v("Факторы, снижающие эффективность конвейера:")]),a("page-list",{attrs:{"list-items":["Простой конвейера, когда некоторые ступени не используются (например, адресация и выборка операнда из ОЗУ не нужны, если команда работает с регистрами).","Ожидание: если следующая команда использует результат предыдущей, то последняя не может начать выполняться до выполнения первой (это преодолевается при использовании внеочередного выполнения команд — out-of-order execution).","Очистка конвейера при попадании в него команды перехода (эту проблему удаётся сгладить, используя предсказание переходов)."]}}),a("page-text",[e._v("Некоторые современные процессоры имеют более 30 ступеней в конвейере, что повышает производительность процессора, но, однако, приводит к увеличению длительности простоя (например, в случае ошибки в предсказании условного перехода). Не существует единого мнения по поводу оптимальной длины конвейера: различные программы могут иметь существенно различные требования.")]),a("page-subheading",[e._v("Суперскалярная архитектура")]),a("page-text",[e._v("Способность выполнения нескольких машинных инструкций за один такт процессора путём увеличения числа исполнительных устройств. Появление этой технологии привело к существенному увеличению производительности, в то же время существует определённый предел роста числа исполнительных устройств, при превышении которого производительность практически перестает расти, а исполнительные устройства простаивают. Частичным решением этой проблемы является, например, технология Hyper-threading.")]),a("page-subheading",[e._v("CISC-процессоры")]),a("page-text",[e._v("Complex instruction set computer — вычисления со сложным набором команд. Процессорная архитектура, основанная на усложнённом наборе команд. Типичными представителями CISC являются микропроцессоры семейства x86 (хотя уже много лет эти процессоры являются CISC только по внешней системе команд: в начале процесса исполнения сложные команды разбиваются на более простые микрооперации (МОП), исполняемые RISC-ядром).")]),a("page-subheading",[e._v("RISC-процессоры")]),a("page-text",[e._v("Reduced instruction set computer — вычисления с упрощённым набором команд (в литературе слово reduced нередко ошибочно переводят как «сокращённый»). Архитектура процессоров, построенная на основе упрощённого набора команд, характеризуется наличием команд фиксированной длины, большого количества регистров, операций типа регистр-регистр, а также отсутствием косвенной адресации. Концепция RISC разработана Джоном Коком из IBM Research, название придумано Дэвидом Паттерсоном (David Patterson).")]),a("page-text",[e._v("Упрощение набора команд призвано сократить конвейер, что позволяет избежать задержек на операциях условных и безусловных переходов. Однородный набор регистров упрощает работу компилятора при оптимизации исполняемого программного кода. Кроме того, RISC-процессоры отличаются меньшим энергопотреблением и тепловыделением.")]),a("page-text",[e._v("Среди первых реализаций этой архитектуры были процессоры MIPS, PowerPC, SPARC, Alpha, PA-RISC. В мобильных устройствах широко используются ARM-процессоры.")]),a("page-subheading",[e._v("MISC-процессоры")]),a("page-text",[e._v("Minimum instruction set computer — вычисления с минимальным набором команд. Дальнейшее развитие идей команды Чака Мура, который полагает, что принцип простоты, изначальный для RISC-процессоров, слишком быстро отошёл на задний план. В пылу борьбы за максимальное быстродействие, RISC догнал и обогнал многие CISC-процессоры по сложности. Архитектура MISC строится на стековой вычислительной модели с ограниченным числом команд (примерно 20—30 команд).")]),a("page-subheading",[e._v("VLIW-процессоры")]),a("page-text",[e._v("Very long instruction word — сверхдлинное командное слово. Архитектура процессоров с явно выраженным параллелизмом вычислений, заложенным в систему команд процессора. Являются основой для архитектуры EPIC. Ключевым отличием от суперскалярных CISC-процессоров является то, что для них загрузкой исполнительных устройств занимается часть процессора (планировщик), на что отводится достаточно малое время, в то время как загрузкой вычислительных устройств для VLIW-процессора занимается компилятор, на что отводится существенно больше времени (качество загрузки и, соответственно, производительность теоретически должны быть выше).")]),a("page-subheading",[e._v("Многоядерные процессоры")]),a("page-text",[e._v("Содержат несколько процессорных ядер в одном корпусе (на одном или нескольких кристаллах).")]),a("page-text",[e._v("Процессоры, предназначенные для работы одной копии операционной системы на нескольких ядрах, представляют собой высокоинтегрированную реализацию мультипроцессорности.")]),a("page-text",[e._v("Первым многоядерным микропроцессором стал POWER4 от IBM, появившийся в 2001 году и имевший два ядра.")]),a("page-text",[e._v("В октябре 2004 года Sun Microsystems выпустила двухъядерный процессор UltraSPARC IV, который состоял из двух модифицированных ядер UltraSPARC III. В начале 2005 был создан двухъядерный UltraSPARC IV+.")]),a("page-text",[e._v("9 мая 2005 года AMD представила первый двухъядерный процессор на одном кристалле для пользовательских ПК — Athlon 64 X2 с ядром Manchester. Поставки новых процессоров официально начались 1 июня 2005 года.")]),a("page-text",[e._v("14 ноября 2005 года Sun выпустила восьмиядерный UltraSPARC T1, каждое ядро которого выполняло 4 потока.")]),a("page-text",[e._v("5 января 2006 года Intel представила первый двухъядерный процессор на одном кристалле Core Duo, для мобильной платформы.")]),a("page-text",[e._v("В ноябре 2006 года вышел первый четырёхъядерный процессор Intel Core 2 Quad на ядре Kentsfield, представляющий собой сборку из двух кристаллов Conroe в одном корпусе. Потомком этого процессора стал Intel Core 2 Quad на ядре Yorkfield (45 нм), архитектурно схожем с Kentsfield, но имеющем больший объём кэша и рабочие частоты.")]),a("page-subheading",[e._v("Кэширование")]),a("page-text",[e._v("Кэширование — это использование дополнительной быстродействующей памяти (так называемого кэша — англ. cache, от фр. cacher — «прятать») для хранения копий блоков информации из основной (оперативной) памяти, вероятность обращения к которым в ближайшее время велика.")]),a("page-text",[e._v("Различают кэши 1-, 2- и 3-го уровней (обозначаются L1, L2 и L3 — от Level 1, Level 2 и Level 3). Кэш 1-го уровня имеет наименьшую латентность (время доступа), но малый размер, кроме того, кэши первого уровня часто делаются многопортовыми. Так, процессоры AMD K8 умели производить одновременно 64-битные запись и чтение, либо два 64-битных чтения за такт, AMD K8L может производить два 128-битных чтения или записи в любой комбинации. Процессоры Intel Core 2 могут производить 128-битные запись и чтение за такт. Кэш 2-го уровня обычно имеет значительно большую латентность доступа, но его можно сделать значительно больше по размеру. Кэш 3-го уровня — самый большой по объёму и довольно медленный, но всё же он гораздо быстрее, чем оперативная память.")]),a("page-section",{attrs:{heading:"Как выглядит процессор"}}),a("page-carousel",{attrs:{images:["cpu1.png","cpu2.png","cpu3.png"]}}),a("page-section",{attrs:{heading:"Гарвардская архитектура"}}),a("page-text",[e._v("Гарвардская архитектура отличается от архитектуры фон Неймана тем, что программный код и данные хранятся в разной памяти. В такой архитектуре невозможны многие методы программирования (например, программа не может во время выполнения менять свой код; невозможно динамически перераспределять память между программным кодом и данными); зато гарвардская архитектура позволяет более эффективно выполнять работу в случае ограниченных ресурсов, поэтому она часто применяется во встраиваемых системах.")]),a("page-section",{attrs:{heading:"Параллельная архитектура"}}),a("page-text",[e._v("Архитектура фон Неймана обладает тем недостатком, что она последовательная. Какой бы огромный массив данных ни требовалось обработать, каждый его байт должен будет пройти через центральный процессор, даже если над всеми байтами требуется провести одну и ту же операцию. Этот эффект называется узким горлышком фон Неймана.")]),a("page-text",[e._v("Для преодоления этого недостатка предлагались и предлагаются архитектуры процессоров, которые называются параллельными. Параллельные процессоры используются в суперкомпьютерах.")]),a("page-text",[e._v("Возможными вариантами параллельной архитектуры могут служить (по классификации Флинна):")]),a("page-list",{attrs:{"list-items":["SISD — один поток команд, один поток данных;","SIMD — один поток команд, много потоков данных;","MISD — много потоков команд, один поток данных;","MIMD — много потоков команд, много потоков данных."]}}),a("page-subheading",[e._v("Цифровые сигнальные процессоры")]),a("page-text",[e._v("Для цифровой обработки сигналов, особенно при ограниченном времени обработки, применяют специализированные высокопроизводительные сигнальные микропроцессоры (англ. digital signal processor, DSP) с параллельной архитектурой.")]),a("page-section",{attrs:{heading:"Видео об основных характеристиках процессора"}}),e._m(0)],1)},r=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"video-wrapper"},[a("iframe",{staticClass:"video",attrs:{src:"https://www.youtube.com/embed/BSy90IOGeag",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""}})])}],i=a("973f"),s=a("000d"),c=a("fd2d"),u=a("18dc"),o=a("b9e7"),p=a("679c"),l={name:"Cpu",components:{PageHeading:u["a"],PageText:p["a"],PageSection:c["a"],PageList:s["a"],PageSubheading:o["a"],PageCarousel:i["a"]}},g=l,f=(a("a5f0"),a("2877")),d=Object(f["a"])(g,n,r,!1,null,"4874c1b3",null);t["default"]=d.exports},fd2d:function(e,t,a){"use strict";var n=function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("h2",{staticClass:"page-section",attrs:{id:e.id}},[e._v(" "+e._s(e.heading)+" ")])},r=[],i=(a("5b81"),a("498a2"),a("b0c0"),{name:"PageSection",data:function(){return{routeName:""}},computed:{id:function(){return this.heading.trim().replaceAll("?","").replaceAll(/\s/g,"-")},href:function(){return"#".concat(this.id)}},props:{heading:{required:!0,type:String}},mounted:function(){this.routeName=this.$route.name,this.$store.commit("PAGES_ADD_CHILD",{heading:this.heading,href:this.href,parentRouteName:this.routeName})},destroyed:function(){this.$store.commit("PAGES_REMOVE_CHILD",{href:this.href,parentRouteName:this.routeName})}}),s=i,c=(a("7a83"),a("2877")),u=Object(c["a"])(s,n,r,!1,null,"59644d1d",null);t["a"]=u.exports}}]);
//# sourceMappingURL=chunk-55d221b6.0de13bff.js.map